{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,UAGzBC,EAAiB,GAEvBJ,EAAKC,KAAKI,iBAAiB,UAAU,SAAAC,GACnCA,EAAIC,iBACa,IAAIC,SAASF,EAAIG,eAEzBC,SAAQ,SAACC,EAAOC,GACvBR,EAAeQ,GAAQC,OAAOF,MAOlC,SAAwBG,GAGtB,I,kBACEC,YAAW,WAoBf,IAAuBC,EAAUC,EACzBC,GADeF,EAnBHG,EAmBaF,EAnBVG,EAoBfF,EAAgBG,KAAKC,SAAW,GAC/B,IAAIC,SAAQ,SAACC,EAASC,GACvBP,EACFM,EAAQ,CAAER,WAAUC,UAEpBQ,EAAO,CAAET,WAAUC,cAxBhBS,MAAK,SAAAC,G,IAAGX,EAAQW,EAARX,SAAUC,EAAKU,EAALV,MACjBW,EAAA9B,GAAS+B,OAAOC,QACd,uBAAwCC,OAAff,EAAS,QAAYe,OAANd,EAAM,MAC5C,CAAAe,SAAS,OAGdC,OAAM,SAAAN,G,IAAGX,EAAQW,EAARX,SAAUC,EAAKU,EAALV,MAClBW,EAAA9B,GAAS+B,OAAOK,QACd,sBAAqCH,OAAff,EAAS,QAAYe,OAANd,EAAM,MAC3C,CAAEe,SAAS,OAGjBZ,GAASe,IACRC,GACHA,GAAaD,GApBSf,EAAFN,EAAEG,MAAOkB,EAATrB,EAASqB,KAAME,EAAfvB,EAAeuB,OACjCD,EAAYhB,EAEPkB,EAAI,EAAGA,GAAKD,EAAQC,GAAK,EAACC,EAAAD,GAPnCE,CAAepC,GACfJ,EAAKC,KAAKwC,W","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n};\n\nconst createFormData = {};\n\nrefs.form.addEventListener('submit', evt => {\n  evt.preventDefault();\n  const formData = new FormData(evt.currentTarget);\n\n  formData.forEach((value, name) => {\n    createFormData[name] = Number(value);\n  });\n\n  dataProcessing(createFormData);\n  refs.form.reset();\n});\n\nfunction dataProcessing({ delay, step, amount }) {\n  let timeDelay = delay;\n\n  for (let i = 1; i <= amount; i += 1) {\n    setTimeout(() => {\n      createPromise(i, delay)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`,\n            { useIcon: false }\n          );\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`,\n            { useIcon: false }\n          );\n        });\n      delay += step;\n    }, timeDelay);\n    timeDelay += step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  });\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","$ce04d3a99e08e73b$var$createFormData","addEventListener","evt","preventDefault","FormData","currentTarget","forEach","value","name","Number","param1","setTimeout","position","delay","shouldResolve","i","delay1","Math","random","Promise","resolve","reject","then","param","$parcel$interopDefault","Notify","success","concat","useIcon","catch","failure","step","timeDelay","amount","i1","_loop","$ce04d3a99e08e73b$var$dataProcessing","reset"],"version":3,"file":"03-promises.a586a82c.js.map"}